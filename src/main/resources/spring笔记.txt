spring的主要作用
          为代码"解耦"、降低代码间的耦合度，使其高内聚低耦合

根据功能的不同，可以将一个系统中的代码分为 主业务逻辑与系统级业务逻辑两类

spring根据代码的功能特点，降低耦合度的方式为了两类：IOC与AOP

spring容器
  作为一个容器，可以管理对象的生命周期、对象与对象之间的依赖关系、可以通过配置文件、来定义对象，以及设置与其他对象的依赖关系

IOC
使得主业务在相互调用过程中，不用在自己维护关系，即不再自己创建要使用的对象，而由spring容器进行统一管理，自动【注入】
控制反转(Inversion of control) 即创建被调用者的实例不是有调用者完成，而是spring容器完成，并注入调用者
当应用了IOC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象，即，不是对象从容器中查找依赖，
而是容器在对象初始化时不等对象请求就主动将依赖传递给它


AOP
使得系统级服务得到了最大复用，且不再由开发者将系统服务“混杂”到主业务逻辑中，而由spring容器进行统一完成【织入】
面向切面编程(Aspect oriented programming)是一种编程思想，是面向对象变成OOP的补充
很多框架都实现了对AOP编程思想的实现，spring也提供了面向编程的丰富支持，允许通过分离应用
的业务逻辑与系统级服务(例如日志和事物管理)进行开发，应用对象只实现它们应该做的--完成业务逻辑
--仅此而已，它们并不负责其它的系统级关注点，例如日志或事物支持,

